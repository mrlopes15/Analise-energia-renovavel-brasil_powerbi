expression 'Erros em fGeracao' =
		let
		Fonte = fGeracao,
		  #"Incompatibilidades de Tipo Detectadas" = let
		    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Fonte, Table.ColumnsOfType(Fonte, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
		    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
		    fieldNames = Record.FieldNames(recordTypeFields),
		    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
		    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "O tipo do valor não corresponde ao tipo da coluna.", Detail = v], fieldTypes{i}})
		in
		    Table.TransformColumns(Fonte, pairs),
		  #"Índice Adicionado" = Table.AddIndexColumn(#"Incompatibilidades de Tipo Detectadas", "Número da Linha" ,1),
		  #"Erros Mantidos" = Table.SelectRowsWithErrors(#"Índice Adicionado", {"Empreendimento", "UF", "Fonte", "Fase", "Tipo", "Tipo de Atuação", "Entrada em Operação", "Proprietário / Regime de Exploração", "Município (s)", "Potência Fiscalizada (kW)", "Potência Outorgada (kW)", "Latitude Decimal", "Longitude Decimal"}),
		  #"Colunas Reordenadas" = Table.ReorderColumns(#"Erros Mantidos", {"Número da Linha", "Empreendimento", "UF", "Fonte", "Fase", "Tipo", "Tipo de Atuação", "Entrada em Operação", "Proprietário / Regime de Exploração", "Município (s)", "Potência Fiscalizada (kW)", "Potência Outorgada (kW)", "Latitude Decimal", "Longitude Decimal"})
		in
		  #"Colunas Reordenadas"
	lineageTag: db8d1977-6e41-4302-b82b-bbfacd02a4bb
	queryGroup: 'Erros na Consulta - 22/09/2025 18:21:46'

	annotation PBI_NavigationStepName = Navegação

	annotation PBI_ResultType = Table

